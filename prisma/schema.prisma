generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Account {
  id             String  @id @unique @default(cuid())
  user           User    @relation(fields: [id], references: [id], onDelete: Cascade)
  hashedPassword String?
  loginProvider  String
}

model User {
  id           String        @id @unique @default(cuid())
  nickname     String        @unique
  profileImage String?
  bannerImage  String?
  description  String?
  karma        Int           @default(0)
  cc           Int           @default(0)
  role         String        @default("user")
  account      Account?
  achievements Achievement[]
  posts        Post[]        @relation("UserPosts")
  comments     PostComment[] @relation("UserComments")
  reactions    Reaction[]
  replay       Replay[]
  table        Table?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Post {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  subTitle      String?
  isPinned      Boolean       @default(false)
  content       String
  featuredImage String?
  category      String
  bumpDate      DateTime      @default(now())
  status        String        @default("published")
  comments      PostComment[]
  reactions     Reaction[]
  author        User          @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model PostComment {
  id              String        @id @default(cuid())
  content         String
  reactions       Reaction[]
  author          User          @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  post            Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  bumpDate        DateTime      @default(now())
  postId          String?
  authorId        String
  parentCommentId String?
  parentComment   PostComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         PostComment[] @relation("CommentReplies")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Achievement {
  id            String   @id @default(cuid())
  AchievementId Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
}

model Reaction {
  id        String       @id @default(cuid())
  type      String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   PostComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  createdAt DateTime     @default(now())

  @@unique([userId, postId, commentId, type])
}

model Replay {
  replayId    String    @id @default(cuid())
  player      String
  character   String
  rank        String
  shotType    String?
  stage       String?
  stageScore  String
  score       BigInt
  game        Int
  replayDate  String?
  rpyName     String
  slowRate    String?
  acceptedBy  String?
  file        Bytes
  comment     String?
  createdAt   DateTime  @default(now())
  fileDate    DateTime?
  achievement Int
  status      Boolean   @default(false)

  userId  String
  profile User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Table {
  hrtp    String
  soew    String
  podd    String
  lls     String
  ms      String
  eosd    String
  pcb     String
  in      String
  pofv    String
  mof     String
  sa      String
  ufo     String
  gfw     String
  td      String
  ddc     String
  lolk    String
  hsifs   String
  wbawc   String
  um      String
  userId  String @unique
  profile User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
